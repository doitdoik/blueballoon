<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
<!-- 데이터베이스 연결 등 프로젝트에 대한 설정을 텍스트 파일로 분리 미리 정해놓은 형식에 따라 작성 -> xml 프로젝트마다 
		임의로 만들고 자바로 읽어들인다 -> properties -->
	<util:properties id="config"
		location="classpath:/config/config.properties" />

	<!-- Connection Pool 설정 : https://d2.naver.com/helloworld/5102792 참조 Hikari의 
		속도가 DBCP2보다 빠르다지만 설정에 대한 정보가 별로 없다 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName"
			value="#{config['spring.datasource.driver-class-name']}" />
		<property name="url"
			value="#{config['spring.datasource.url']}" />
		<property name="username"
			value="#{config['spring.datasource.username']}" />
		<property name="password"
			value="#{config['spring.datasource.password']}" />

		<!-- BasicDataSource 클래스 생성 후 최초로 getConnection() 메서드를 호출할 때 커넥션 풀에 채워 
			넣을 커넥션 개수 -->
		<property name="initialSize" value="0" />
		<!-- 동시에 사용할 수 있는 최대 커넥션 개수(기본값: 8) -->
		<property name="maxTotal" value="8" />
		<!-- 사용하지 않는 최대 커넥션 개수(기본값: 8) -->
		<property name="maxIdle" value="8" />
		<!-- 사용하지 않는 최소 커넥션 개수(기본값: 0) -->
		<property name="minIdle" value="0" />
		<!-- 커넥션을 바로 얻을 수 없을 때 얼마까지 대기한 다음 timeout할 것인가 (기본값 : 무한대기) -->
		<property name="maxWaitMillis" value="-1" />
	</bean>

	<!-- 마이바티스 Class에서 사용할 SqlSessionTemplate을 생성 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:/mybatis-config.xml" />
		<property name="mapperLocations"
			value="classpath:/mapper/*.xml" />
	</bean>
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory" />
	</bean>	
	
	<bean id="filterMultipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
         <!-- 최대업로드 가능한 바이트크기 : 1MB-->
         <property name="maxUploadSize" value="1048576" />
	</bean>
	
	
	<!-- @Mapper는 마이바티스가 객체를 생성한다. 마이바티스에게 @Mapper 클래스의 위치를 알려준다 -->
	<mybatis-spring:scan base-package="com.icia.blueballoon.dao" />
	
	
	<context:component-scan base-package="com.icia.blueballoon">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>	
	
	<!-- @Transactional 어노테이션 활성화 -->
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
	
		<!-- 메일 설정 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="kjkpk66" />
		<property name="password" value="wodlrr7799!" />
		<property name="javaMailProperties">
		
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtp.timeout">8500</prop>
				<!-- log를 보고 싶다면 true. false로 하면 메일 관련 메시지가 나오지 않는다 -->
				<prop key="mail.debug">true</prop>	
			</props>
		</property>
	</bean>	
	
	<!-- 필요한 객체들 생성하는 부분 -->
	<bean id="mailUtil" class="com.icia.blueballoon.util.MailUtil" />
	<bean id="pwdEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<bean id="modelMapper" class="org.modelmapper.ModelMapper" />
	<bean id="gson" class="com.google.gson.Gson" />

</beans>
